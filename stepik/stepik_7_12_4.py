
# Подвиг 4. Объявите функцию с именем get_list и следующим описанием в теле функции:
# '''Функция для формирования списка целых значений'''

# Сама функция должна формировать и возвращать список целых чисел, который поступает на ее вход
# в виде строки из целых чисел, записанных через пробел.

# Определите декоратор, который выполняет суммирование значений из списка этой функции и возвращает результат.
# Внутри декоратора декорируйте переданную функцию get_list с помощью команды @wraps (не забудьте
# сделать импорт: from functools import wraps). Такое декорирование необходимо, чтобы исходная
# функция get_list сохраняла свои локальные свойства: __name__ и __doc__.

# Примените декоратор к функции get_list, но не вызывайте ее.
from functools import wraps


def s_decorator(fn):
    @wraps(fn)
    def wrapper(*args):
        result = sum(fn(*args))
        return result
    return wrapper

s = '1 2 3 4 5 6 7 8 9 10 11 12'

@s_decorator
def get_list(s):
    '''Функция для формирования списка целых значений'''
    ls = list(map(int, s.split()))
    return ls

if __name__ == '__main__':
    print(f'Сумма {s} равна {get_list(s)}')
